syntax = "proto3";

package logproto;

option go_package = "github.com/grafana/loki/pkg/logproto";

import "google/protobuf/timestamp.proto";

service Pusher {
  rpc Push(PushRequest) returns (PushResponse) {};
}

service Querier {
  rpc Query(QueryRequest) returns (stream QueryResponse) {};
  rpc QuerySample(SampleQueryRequest) returns (stream SampleQueryResponse) {};
  rpc Label(LabelRequest) returns (LabelResponse) {};
  rpc Tail(TailRequest) returns (stream TailResponse) {};
  rpc Series(SeriesRequest) returns (SeriesResponse) {};
  rpc TailersCount(TailersCountRequest) returns (TailersCountResponse) {};
  rpc GetChunkIDs(GetChunkIDsRequest) returns (GetChunkIDsResponse) {}; // GetChunkIDs returns ChunkIDs from the index store holding logs for given selectors and time-range.
}

service Ingester {
  rpc TransferChunks(stream TimeSeriesChunk) returns (TransferChunksResponse) {};
}

message PushRequest {
  repeated StreamAdapter streams = 1;
}

message PushResponse {
}

message QueryRequest {
  string selector = 1;
  uint32 limit = 2;
  google.protobuf.Timestamp start = 3;
  google.protobuf.Timestamp end = 4;
  Direction direction = 5;
  reserved 6;
  repeated string shards = 7;
}

message SampleQueryRequest {
  string selector = 1;
  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
  repeated string shards = 4;
}

message SampleQueryResponse {
  repeated Series series = 1;
}

enum Direction {
  FORWARD = 0;
  BACKWARD = 1;
}

message QueryResponse {
  repeated StreamAdapter streams = 1;
}

message LabelRequest {
  string name = 1;
  bool values = 2; // True to fetch label values, false for fetch labels names.
  google.protobuf.Timestamp start = 3;
  google.protobuf.Timestamp end = 4;
}

message LabelResponse {
  repeated string values = 1;
}

message StreamAdapter {
  string labels = 1;
  repeated EntryAdapter entries = 2;
}

message EntryAdapter {
  google.protobuf.Timestamp timestamp = 1;
  string line = 2;
}

message Sample {
  int64 timestamp = 1;
  double value = 2;
  uint64 hash = 3;
}

message Series {
  string labels = 1;
  repeated Sample samples = 2;
}

message TailRequest {
  string query = 1;
  reserved 2;
  uint32 delayFor = 3;
  uint32 limit = 4;
  google.protobuf.Timestamp start = 5;
}

message TailResponse {
  StreamAdapter stream = 1;
  repeated DroppedStream droppedStreams = 2;
}

message SeriesRequest {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
  repeated string groups = 3;
  repeated string shards = 4;
}

message SeriesResponse {
  repeated SeriesIdentifier series = 1;
}

message SeriesIdentifier {
  map<string,string> labels = 1;
}

message DroppedStream {
  google.protobuf.Timestamp from = 1;
  google.protobuf.Timestamp to = 2;
  string labels = 3;
}

message TimeSeriesChunk {
  string from_ingester_id = 1;
  string user_id = 2;
  repeated LabelPair labels = 3;
  repeated Chunk chunks = 4;
}

message LabelPair {
  string name = 1;
  string value = 2;
}

message Chunk {
  bytes data = 1;
}

message TransferChunksResponse {

}

message TailersCountRequest {

}

message TailersCountResponse {
  uint32 count = 1;
}

message GetChunkIDsRequest {
  string matchers = 1;
  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
}

message GetChunkIDsResponse {
  repeated string chunkIDs = 1;
}